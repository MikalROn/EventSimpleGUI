{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Events For SimpleGui Status of project: in progress... This project has the intention to make easier, scalable and readable events on PySimpleGUI Download Download from PyPi $pip install EventSimpleGUI Fast-Start Here is a basic window from pysimpleevent import EventSimpleGUI import PySimpleGUI as sg loop = EventSimpleGUI() win = sg.Window('Win', [[sg.B('click')]]) @loop.event('click') def simple_event(*args): print('click') if __name__ == '__main__': loop.run_window(win) The key that's trigger the event has to be passed as an argument of loop.event() Event Function Arguments Every event functions will recive 3 arguments (event, values, window) Event: is a string that's comes from Window.Read() Values: is a dict that's comes from Window.Read() and also contain return of event function(with the name of function) Window: is a sg.Window object, same window that's being runned on loop.run_window(window) Demonstration Creating an event function Using the decorator event to run an event, you can pass the element key as an argument for decorator, when the event is called, function is going to be called two from pysimpleevent import EventSimpleGUI import PySimpleGUI as sg loop = EventSimpleGUI() @loop.event('_click') def when_btn_was_clicked(*ags): print('Just a normal event') layout = [[sg.B('Just a button', key='_click')]] window = sg.Window('Just a Window.', layout) if __name__ == '__main__': loop.run_window(window) Events can be passed as an argument of run window like in the exemple from pysimpleevent import EventSimpleGUI import PySimpleGUI as sg loop = EventSimpleGUI() def when_btn_was_clicked(*args): event, _, _ = args if event == '_click': print('Just a normal event') layout = [[sg.B('Just a button', key='_click')]] window = sg.Window('Just a Window.', layout) if __name__ == '__main__': loop.run_window(window, when_btn_was_clicked) And can also pass an event using add_event from pysimpleevent import EventSimpleGUI import PySimpleGUI as sg loop = EventSimpleGUI() def when_btn_was_clicked(*args): event, _, _ = args if event == '_click': print('Just a normal event') loop.add_event(when_btn_was_clicked) layout = [[sg.B('Just a button', key='_click')]] window = sg.Window('Just a Window.', layout) if __name__ == '__main__': loop.run_window(window) Events You can use a sting or list of keys to trigger your events from pysimpleevent import EventSimpleGUI import PySimpleGUI as sg loop = EventSimpleGUI() keys = ['_click', '_click1'] @loop.event(keys) def when_btn_was_clicked(*args): print('Just a normal event') layout = [ [sg.B(f'{\"Just a button\":54}', key='_click')], [sg.B(f'{\"Just another button\":50}', key='_click1')] ] window = sg.Window('Just a Window.', layout, scaling=1.5) if __name__ == '__main__': loop.run_window(window, window_log=True) Change log 0.2.7 Tests are implemented 97% cov Close event replaced to the end of loop Change log 0.2.5 Now events can return values on Values dict","title":"Events For SimpleGui"},{"location":"#events-for-simplegui","text":"Status of project: in progress... This project has the intention to make easier, scalable and readable events on PySimpleGUI","title":"Events For SimpleGui"},{"location":"#download","text":"Download from PyPi $pip install EventSimpleGUI","title":"Download"},{"location":"#fast-start","text":"Here is a basic window from pysimpleevent import EventSimpleGUI import PySimpleGUI as sg loop = EventSimpleGUI() win = sg.Window('Win', [[sg.B('click')]]) @loop.event('click') def simple_event(*args): print('click') if __name__ == '__main__': loop.run_window(win) The key that's trigger the event has to be passed as an argument of loop.event()","title":"Fast-Start"},{"location":"#event-function-arguments","text":"Every event functions will recive 3 arguments (event, values, window) Event: is a string that's comes from Window.Read() Values: is a dict that's comes from Window.Read() and also contain return of event function(with the name of function) Window: is a sg.Window object, same window that's being runned on loop.run_window(window)","title":"Event Function Arguments"},{"location":"#demonstration","text":"","title":"Demonstration"},{"location":"#events","text":"You can use a sting or list of keys to trigger your events from pysimpleevent import EventSimpleGUI import PySimpleGUI as sg loop = EventSimpleGUI() keys = ['_click', '_click1'] @loop.event(keys) def when_btn_was_clicked(*args): print('Just a normal event') layout = [ [sg.B(f'{\"Just a button\":54}', key='_click')], [sg.B(f'{\"Just another button\":50}', key='_click1')] ] window = sg.Window('Just a Window.', layout, scaling=1.5) if __name__ == '__main__': loop.run_window(window, window_log=True)","title":"Events"},{"location":"#change-log-027","text":"Tests are implemented 97% cov Close event replaced to the end of loop","title":"Change log 0.2.7"},{"location":"#change-log-025","text":"Now events can return values on Values dict","title":"Change log 0.2.5"},{"location":"call_reference/","text":"Call reference class: EventSimpleGUI( ) Use this class to start a window and create events Exemple: loop = EventSimpleGUI() method: add_event( event ) You can use this method, but it is recomended to use decor @EventSimpleGUI.event :param event: Must be an event function Exemple: def func(*args): print(args) loop.add_event(func) property: get_events( ) Use this property to get all events, from @event or add_event :return: List of event functions Exemple: loop.get_events method: run_window( window, args, *keyargs) Use this property to get all events, from @event or add_event params resume Window can be any PySimpleGUI Window args can be any function that recives (event: str , values: dict, window: PySimpleGUI.Window) window_log if True prints events and values on the console return_values if True return values of window.read() task can be any calable function close event a diferent key to close the window return dict of values or None Exemple: win = sg.Window('win', [[sg.T('hello world')]]) loop.run_window(win) decorator: event( key ) Use this decorator to create an event function param key event string or a list of them Exemple: win = sg.Window('win', [[sg.T('hello world')]]) loop.run_window(win)","title":"Call reference"},{"location":"call_reference/#call-reference","text":"","title":"Call reference"},{"location":"call_reference/#class-eventsimplegui","text":"Use this class to start a window and create events","title":" class: EventSimpleGUI(  )"},{"location":"call_reference/#exemple","text":"loop = EventSimpleGUI()","title":"Exemple:"},{"location":"call_reference/#method-add_event-event","text":"You can use this method, but it is recomended to use decor @EventSimpleGUI.event :param event: Must be an event function","title":" method: add_event( event ) "},{"location":"call_reference/#property-get_events","text":"Use this property to get all events, from @event or add_event :return: List of event functions","title":" property: get_events(  )"},{"location":"call_reference/#method-run_window-window-args-keyargs","text":"Use this property to get all events, from @event or add_event params resume Window can be any PySimpleGUI Window args can be any function that recives (event: str , values: dict, window: PySimpleGUI.Window) window_log if True prints events and values on the console return_values if True return values of window.read() task can be any calable function close event a diferent key to close the window return dict of values or None","title":" method: run_window( window, args, *keyargs)  "},{"location":"call_reference/#decorator-event-key","text":"Use this decorator to create an event function param key event string or a list of them","title":" decorator: event( key )  "}]}